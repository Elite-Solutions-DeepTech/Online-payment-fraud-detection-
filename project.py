# -*- coding: utf-8 -*-
"""project

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1x23Ft-dQRLc22f6yVNHRj9aBBx3yEj04
"""

import numpy as np
import pandas as pd
data = pd.read_csv('/content/onlinefraud.csv')
data.head()

data.dtypes

data.shape

data.isnull().sum()

null_num_columns = ['amount','nameOrig','oldbalanceOrg','newbalanceOrig','type','nameDest','oldbalanceDest','newbalanceDest','isFraud', 'isFlaggedFraud']
for col in data[null_num_columns]:
  data[col].fillna(data[col].mode()[0],inplace=True)

data.isnull().sum()

data.head()

data['type'].value_counts()

type=data['type'].value_counts()
transaction=type.index
quantity=type.values
import plotly.express as px
figure = px.pie(data,values=quantity,names=transaction,hole=0.5,title="distribution of transaction type")
figure.show()

from sklearn.preprocessing import LabelEncoder
labelencoder = LabelEncoder()

data['type'] = labelencoder.fit_transform(data['type'])
data['nameOrig'] = labelencoder.fit_transform(data['nameOrig'])
data['nameDest'] = labelencoder.fit_transform(data['nameDest'])

data

data.dtypes

data['isFraud'] = data['isFraud'].replace({'No Fraud': 0, 'Fraud': 1})

# Now calculate the correlation
correlation = data.corr()
print(correlation['isFraud'].sort_values(ascending=False))

data["type"]=data["type"].map({'CASH_OUT':1,'PAYMENT':2,'CASH_IN':3,'TRANSFER':4,'DEBIT':5})
data["isFraud"]=data["isFraud"].map({0:"No Fraud",1:"Fraud"})
#data

nan_values = data.isnull().sum()

data=data.fillna(0)
print(nan_values)

from sklearn.model_selection import train_test_split
x=np.array(data[["type","amount","oldbalanceOrg","newbalanceOrig"]])
y=np.array(data[["isFraud"]])

from sklearn.tree import DecisionTreeClassifier
xtrain,xtest,ytrain,ytest=train_test_split(x,y,test_size=0.2,random_state=42)
model=DecisionTreeClassifier()
model.fit(xtrain, ytrain)
#print(model.score(xtest, ytest))
y_pred=model.predict(xtest)
print(model.score(x,y))

from sklearn.metrics import accuracy_score
print(accuracy_score(ytest,y_pred))

features=np.array([[5,181.0,181.0,0.0]])
print(model.predict(features))

import pickle
filename = '/content/project.save'
pickle.dump(model, open(filename, 'wb'))